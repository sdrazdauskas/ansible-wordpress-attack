---
- name: "Enable packet capture and simulate attack"
  hosts: all
  become: yes
  vars_files:
    - ../misc/vault.yml

  vars:
    ansible_become_pass: "{{ web_server_pass }}" # Both are the same in this case
    attacker_ip: "{{ attack_server_ip }}"
    target_ip: "{{ web_server_ip }}"
    pcap_dir: "/tmp/pcap_files"
    capture_duration: 60  # Duration in seconds for packet capture
    attack_script_path: "/tmp/wp-file-manager-CVE-2020-25213/wp-file-manager-exploit.sh"  # Path to attack script

  tasks:
    - name: "Ensure tcpdump is installed on both machines"
      apt:
        name: tcpdump
        state: present
        update_cache: yes

    - name: "Create directory for PCAP files on both machines"
      file:
        path: "{{ pcap_dir }}"
        state: directory
        mode: '0755'

    - name: "Verify attack script exists"
      stat:
        path: "{{ attack_script_path }}"
      register: attack_script_check

    - name: "Start packet capture on attacker machine"
      ansible.builtin.shell: >
        nohup tcpdump -i any -w {{ pcap_dir }}/attacker.pcap host {{ target_ip }} > /tmp/tcpdump_attacker.log 2>&1 &
      when: inventory_hostname == "attack_server"

    - name: "Start packet capture on target machine"
      ansible.builtin.shell: >
        nohup tcpdump -i any -w {{ pcap_dir }}/target.pcap host {{ attacker_ip }} > /tmp/tcpdump_target.log 2>&1 &
      when: inventory_hostname == "web_server"

    - name: "Run attack simulation script"
      ansible.builtin.shell: >
        bash {{ attack_script_path }} -u {{ target_ip }}/wordpress -k || exit 1
      when:
        - inventory_hostname == "attack_server"
        - attack_script_check.stat.exists

    - name: "Wait for packet capture to complete"
      ansible.builtin.pause:
        seconds: "{{ capture_duration }}"

    - name: "Stop all tcpdump processes on both machines"
      ansible.builtin.shell: >
        pkill -f "tcpdump -i any"
      failed_when: false

    - name: "Ensure PCAP files are readable"
      ansible.builtin.shell: >
        chmod 644 {{ pcap_dir }}/*.pcap
      become: yes

    - name: "Ensure local directory for captured data exists"
      local_action:
        module: file
        path: "./captured_data"
        state: directory
        mode: '0755'

    - name: "Retrieve PCAP file from attacker machine"
      fetch:
        src: "{{ pcap_dir }}/attacker.pcap"
        dest: "./captured_data/attacker.pcap"
        flat: yes
      when: inventory_hostname == "attack_server"

    - name: "Retrieve PCAP file from target machine"
      fetch:
        src: "{{ pcap_dir }}/target.pcap"
        dest: "./captured_data/target.pcap"
        flat: yes
      when: inventory_hostname == "web_server"

    - name: "Clean up PCAP files on both machines"
      file:
        path: "{{ pcap_dir }}"
        state: absent